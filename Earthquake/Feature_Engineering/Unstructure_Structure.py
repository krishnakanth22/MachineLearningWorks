# -*- coding: utf-8 -*-
"""Feature_Engineering

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vcS98JX2EzRU-YB6FW1vjU1_jajavZbo
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
file_path = '/content/drive/MyDrive/Earthquake_K_Net/KNet_Tc_Pd_ManuallyPlusKalkan_1996.csv'
df = pd.read_csv(file_path)

df.info()

import pandas as pd
df1 = df.iloc[1:1000, 5]
print(df1)

print(df)

file_path = '/content/drive/MyDrive/Earthquake_K_Net/1996/19960523183600.knt/IWT0039605231836.UD'

with open(file_path, 'r') as file:
    contents = file.read()

print(contents)

lines = contents.split("\n")
memo_index = None
for i, line in enumerate(lines):
    if "Memo." in line:
        memo_index = i
        break
if memo_index is not None:
    memo_data = []
    memo_line_index = memo_index + 1
    while memo_line_index < len(lines) and lines[memo_line_index].strip():
        memo_data.extend(lines[memo_line_index].strip().split())
        memo_line_index += 1

    memo_array = [int(value) for value in memo_data]

    print("Memo.")
    print(memo_array)

print  (len(memo_array))

ud_lines = contents.split('\n')
for line in ud_lines:
    if 'Mag.' and '' in line:
        mag_value = line.split()[-1]
        print("Magnitude:", mag_value)
        break

from datetime import datetime

unstructured_data = """
Origin Time       1996/05/23 18: 36:00
Lat.              38.653
Long.             142.313
Depth. (km)       39
Mag.              5.0
Station Code      IWT003
Station Lat.      40.0083
Station Long.     141.8861
Station Height(m) 9
Record Time       1996/05/23 18: 36:58
Sampling Freq(Hz) 100Hz
Duration Time(s)  59
Dir.              U-D
Scale Factor      2000(gal)/8388608
Max. Acc. (gal)   4.764
Last Correction   1996/05/23 18: 00:00
"""

def convert_to_formatted_data(unstructured_data):
    formatted_data = {}
    lines = unstructured_data.strip().split('\n')
    for line in lines:
        key, value = line.split(maxsplit=1)
        key = key.strip(':')
        if key in ['Origin Time', 'Record Time', 'Last Correction']:
            value = datetime.strptime(value.strip(), '%Y/%m/%d %H: %M: %S')
        elif key in ['Lat.', 'Long.', 'Depth. (km)', 'Mag.', 'Station Lat.', 'Station Long.', 'Station Height(m)', 'Max. Acc. (gal)']:
            value = float(value)
        elif key == 'Sampling Freq(Hz)':
            value = int(value.split('Hz')[0])
        elif key == 'Duration Time(s)':
            value = int(value)
        elif key == 'Station Code' or key == 'Dir.':
            value = value.strip()
        elif key == 'Scale Factor':
            scale_value = value.split('(')[1].split(')')[0]
            numerator, denominator = map(float, scale_value.split('/'))
            value = (numerator, denominator)
        formatted_data[key] = value
    return formatted_data

formatted_data = convert_to_formatted_data(unstructured_data)

ud_lines = unstructured_data.split('\n')

# Initialize variables to store values
Max_Acc = None
Mag_value = None
Origin_Time = None
Lat = None
Long = None
Depth = None
Station_Code = None
Station_Lat = None
Station_Long = None
Station_Height = None
Record_Time = None
Sampling_Freq = None
Duration = None
Dir_value = None
Scale_Factor_Numerator = None
Scale_Factor_Denominator = None
Last_Correction = None

# Loop through each line
for line in ud_lines:
    # Extract Max. Acc. (gal)
    if 'Max. Acc. (gal)' in line:
        Max_Acc = float(line.split()[-1])
    # Extract Mag.
    elif 'Mag.' in line:
        Mag_value = float(line.split()[-1])
    # Extract Origin Time
    elif 'Origin Time' in line:
        Origin_Time = line.split()[-1]
    # Extract Lat
    elif 'Lat.' in line:
        Lat = float(line.split()[-1])
    # Extract Long
    elif 'Long.' in line:
        Long = float(line.split()[-1])
    # Extract Depth
    elif 'Depth. (km)' in line:
        Depth = float(line.split()[-1])
    # Extract Station Code
    elif 'Station Code' in line:
        Station_Code = line.split()[-1]
    # Extract Station Lat
    elif 'Station Lat.' in line:
        Station_Lat = float(line.split()[-1])
    # Extract Station Long
    elif 'Station Long.' in line:
        Station_Long = float(line.split()[-1])
    # Extract Station Height
    elif 'Station Height(m)' in line:
        Station_Height = float(line.split()[-1])
    # Extract Record Time
    elif 'Record Time' in line:
        Record_Time = line.split()[-1]
    # Extract Sampling Freq
    elif 'Sampling Freq(Hz)' in line:
        Sampling_Freq = int(line.split()[-1].split('Hz')[0])
    # Extract Duration
    elif 'Duration Time(s)' in line:
        Duration = int(line.split()[-1])
    # Extract Dir
    elif 'Dir.' in line:
        Dir_value = line.split()[-1]
    # Extract Scale Factor
    elif 'Scale Factor' in line:
        scale_value = line.split()[-1].split('(')[1].split(')')[0].split('/')
        Scale_Factor_Numerator = float(scale_value[0])
        Scale_Factor_Denominator = float(scale_value[1])
    # Extract Last Correction
    elif 'Last Correction' in line:
        Last_Correction = line.split()[-1]

# Print extracted values
print("Max_Acc:", Max_Acc)
print("Mag_value:", Mag_value)
print("Origin_Time:", Origin_Time)
print("Lat:", Lat)
print("Long:", Long)
print("Depth:", Depth)
print("Station_Code:", Station_Code)
print("Station_Lat:", Station_Lat)
print("Station_Long:", Station_Long)
print("Station_Height:", Station_Height)
print("Record_Time:", Record_Time)
print("Sampling_Freq:", Sampling_Freq)
print("Duration:", Duration)
print("Dir_value:", Dir_value)
print("Scale_Factor_Numerator:", Scale_Factor_Numerator)
print("Scale_Factor_Denominator:", Scale_Factor_Denominator)
print("Last_Correction:", Last_Correction)

import re

unstructured_data = """
Origin Time       1996/05/23 18: 36:00
Lat.              38.653
Long.             142.313
Depth. (km)       39
Mag.              5.0
Station Code      IWT003
Station Lat.      40.0083
Station Long.     141.8861
Station Height(m) 9
Record Time       1996/05/23 18: 36:58
Sampling Freq(Hz) 100Hz
Duration Time(s)  59
Dir.              U-D
Scale Factor      2000(gal)/8388608
Max. Acc. (gal)   4.764
Last Correction   1996/05/23 18: 00:00
"""

ud_lines = unstructured_data.split('\n')

# Initialize variables to store values
Max_Acc = None
Mag_value = None
Origin_Time = None
Lat = None
Long = None
Depth = None
Station_Code = None
Station_Lat = None
Station_Long = None
Station_Height = None
Record_Time = None
Sampling_Freq = None
Duration = None
Dir_value = None
Scale_Factor_Numerator = None
Scale_Factor_Denominator = None
Last_Correction = None

# Define regular expression pattern for time extraction
time_pattern = r'\d{4}/\d{2}/\d{2}\s\d{2}:\d{2}:\d{2}'

# Define regular expression pattern for scale factor extraction
scale_pattern = r'(\d+)\(gal\)/(\d+)'

# Loop through each line
for line in ud_lines:
    # Extract Max. Acc. (gal)
    if 'Max. Acc. (gal)' in line:
        Max_Acc = float(line.split()[-1])
    # Extract Mag.
    elif 'Mag.' in line:
        Mag_value = float(line.split()[-1])
    # Extract Origin Time
    elif 'Origin Time' in line:
        match = re.search(time_pattern, line)
        Origin_Time = match.group() if match else None
    # Extract Lat
    elif 'Lat.' in line:
        Lat = float(line.split()[-1])
    # Extract Long
    elif 'Long.' in line:
        Long = float(line.split()[-1])
    # Extract Depth
    elif 'Depth. (km)' in line:
        Depth = float(line.split()[-1])
    # Extract Station Code
    elif 'Station Code' in line:
        Station_Code = line.split()[-1]
    # Extract Station Lat
    elif 'Station Lat.' in line:
        Station_Lat = float(line.split()[-1])
    # Extract Station Long
    elif 'Station Long.' in line:
        Station_Long = float(line.split()[-1])
    # Extract Station Height
    elif 'Station Height(m)' in line:
        Station_Height = float(line.split()[-1])
    # Extract Record Time
    elif 'Record Time' in line:
        match = re.search(time_pattern, line)
        Record_Time = match.group() if match else None
    # Extract Sampling Freq
    elif 'Sampling Freq(Hz)' in line:
        Sampling_Freq = int(line.split()[-1].split('Hz')[0])
    # Extract Duration
    elif 'Duration Time(s)' in line:
        Duration = int(line.split()[-1])
    # Extract Dir
    elif 'Dir.' in line:
        Dir_value = line.split()[-1]
    # Extract Scale Factor
    elif 'Scale Factor' in line:
        match = re.search(scale_pattern, line)
        if match:
            Scale_Factor_Numerator = float(match.group(1))
            Scale_Factor_Denominator = float(match.group(2))
    # Extract Last Correction
    elif 'Last Correction' in line:
        match = re.search(time_pattern, line)
        Last_Correction = match.group() if match else None

# Print extracted values
print("Max_Acc:", Max_Acc)
print("Mag_value:", Mag_value)
print("Origin_Time:", Origin_Time)
print("Lat:", Lat)
print("Long:", Long)
print("Depth:", Depth)
print("Station_Code:", Station_Code)
print("Station_Lat:", Station_Lat)
print("Station_Long:", Station_Long)
print("Station_Height:", Station_Height)
print("Record_Time:", Record_Time)
print("Sampling_Freq:", Sampling_Freq)
print("Duration:", Duration)
print("Dir_value:", Dir_value)
print("Scale_Factor_Numerator:", Scale_Factor_Numerator)
print("Scale_Factor_Denominator:", Scale_Factor_Denominator)
print("Last_Correction:", Last_Correction)

print (Mag_value)

unstructured_data = """
Origin Time       1996/05/23 18: 36:00
Lat.              38.653
Long.             142.313
Depth. (km)       39
Mag.              5.0
Station Code      IWT003
Station Lat.      40.0083
Station Long.     141.8861
Station Height(m) 9
Record Time       1996/05/23 18: 36:58
Sampling Freq(Hz) 100Hz
Duration Time(s)  59
Dir.              U-D
Scale Factor      2000(gal)/8388608
Max. Acc. (gal)   4.764
Last Correction   1996/05/23 18: 00:00
"""

ud_lines = unstructured_data.split('\n')

Max_Acc = None
Mag_value = None
Origin_Time = None
Lat = None
Long = None
Depth = None
Station_Code = None
Station_Lat = None
Station_Long = None
Station_Height = None
Record_Time = None
Sampling_Freq = None
Duration = None
Dir_value = None
Scale_Factor_Numerator = None
Scale_Factor_Denominator = None
Last_Correction = None

for line in ud_lines:
    if 'Max. Acc. (gal)' in line:
        Max_Acc = float(line.split()[-1])
    elif 'Mag.' in line:
        Mag_value = float(line.split()[-1])
    elif 'Origin Time' in line:
        Origin_Time = line.split('       ')[-1].strip()
    elif 'Lat.' in line:
        Lat = float(line.split()[-1])
    elif 'Long.' in line:
        Long = float(line.split()[-1])
    elif 'Depth. (km)' in line:
        Depth = float(line.split()[-1])
    elif 'Station Code' in line:
        Station_Code = line.split()[-1]
    elif 'Station Lat.' in line:
        Station_Lat = float(line.split()[-1])
    elif 'Station Long.' in line:
        Station_Long = float(line.split()[-1])
    elif 'Station Height(m)' in line:
        Station_Height = float(line.split()[-1])
    elif 'Record Time' in line:
        Record_Time = line.split('       ')[-1].strip()
    elif 'Sampling Freq(Hz)' in line:
        Sampling_Freq = int(line.split()[-1].split('Hz')[0])
    elif 'Duration Time(s)' in line:
        Duration = int(line.split()[-1])
    elif 'Dir.' in line:
        Dir_value = line.split()[-1]
    elif 'Scale Factor' in line:
        Scale_Factor_Numerator = float(line.split()[2].split('(')[0])
        Scale_Factor_Denominator = float(line.split('/')[-1])
    elif 'Last Correction' in line:
        Last_Correction = line.split('       ')[-1].strip()

print("Max_Acc:", Max_Acc)
print("Mag_value:", Mag_value)
print("Origin_Time:", Origin_Time)
print("Lat:", Lat)
print("Long:", Long)
print("Depth:", Depth)
print("Station_Code:", Station_Code)
print("Station_Lat:", Station_Lat)
print("Station_Long:", Station_Long)
print("Station_Height:", Station_Height)
print("Record_Time:", Record_Time)
print("Sampling_Freq:", Sampling_Freq)
print("Duration:", Duration)
print("Dir_value:", Dir_value)
print("Scale_Factor_Numerator:", Scale_Factor_Numerator)
print("Scale_Factor_Denominator:", Scale_Factor_Denominator)
print("Last_Correction:", Last_Correction)

